{"version":3,"file":"static/js/597.d1345aa4.chunk.js","mappings":"6LAmCA,UA9Ba,WACX,OAA0BA,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAQR,OANAE,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAgBH,GACbI,KAAKL,GACLM,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAhB,GACf,GAAE,CAACN,KAGF,gCACE,kCACA,wBACGF,EAAMW,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,UAAWC,EAAxB,EAAwBA,aAAxB,OACT,2BACE,gBACEC,IAAG,yCAAoCD,GACvCE,IAAKJ,EACLK,MAAM,SAER,wCAAgBL,MAChB,4CAAoBC,OAPbF,EADA,QAclB,C,qBCjCD,SAASO,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBE,EAAQD,EAAKC,KAInB,CAHE,MAAOpB,GAEP,YADAc,EAAOd,EAET,CAEImB,EAAKE,KACPR,EAAQO,GAERE,QAAQT,QAAQO,GAAOtB,KAAKiB,EAAOC,EAEvC,CAEe,SAASO,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACPC,EAAOC,UACX,OAAO,IAAIN,SAAQ,SAAUT,EAASC,GACpC,IAAIF,EAAMY,EAAGK,MAAMJ,EAAME,GAEzB,SAASZ,EAAMK,GACbT,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQI,EAClE,CAEA,SAASJ,EAAOc,GACdnB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASc,EACnE,CAEAf,OAAMgB,EACR,GACF,CACF,C,uJClCaC,EAAiB,6BAAG,sGACRC,MAAM,4FADE,cACzBC,EADyB,gBAIZA,EAASC,OAJG,cAIzBC,EAJyB,yBAKxBA,EAAKC,SALmB,2CAAH,qDAQjBC,EAAkB,6BAAG,WAAMC,GAAN,yFACTN,MAAM,4FAAD,OACkEM,IAF9D,cAC1BL,EAD0B,gBAIbA,EAASC,OAJI,cAI1BC,EAJ0B,yBAKzBA,EAAKC,SALoB,2CAAH,sDAQlBG,EAAe,6BAAG,WAAMpC,GAAN,yFACN6B,MAAM,sCAAD,OACY7B,EADZ,8CADC,cACvB8B,EADuB,gBAIVA,EAASC,OAJC,cAIvBC,EAJuB,yBAKtBA,GALsB,2CAAH,sDAQfvC,EAAe,6BAAG,WAAMO,GAAN,yFACN6B,MAAM,sCAAD,OACY7B,EADZ,sDADC,cACvB8B,EADuB,gBAIVA,EAASC,OAJC,cAIvBC,EAJuB,yBAKtBA,EAAKK,MALiB,2CAAH,sDAQfC,EAAe,6BAAG,WAAMhD,GAAN,yFACNuC,MAAM,sCAAD,OACYvC,EADZ,sDADC,cACvBwC,EADuB,gBAIVA,EAASC,OAJC,cAIvBC,EAJuB,yBAKtBA,EAAKC,SALiB,2CAAH,qD","sources":["components/Cast.jsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","services/api.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { getMovieCredits } from '../services/api';\n\nconst Cast = () => {\n  const [movie, setMovie] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    getMovieCredits(movieId)\n      .then(setMovie)\n      .catch(error => console.log(error));\n  }, [movieId]);\n\n  return (\n    <section>\n      <h2>Cast</h2>\n      <ul>\n        {movie.map(({ id, name, character, profile_path }) => (\n          <li key={id}>\n            <img\n              src={`https://image.tmdb.org/t/p/w500${profile_path}`}\n              alt={name}\n              width=\"150\"\n            />\n            <p>Actor Name: {name}</p>\n            <p>Character Name: {character}</p>\n          </li>\n        ))}\n      </ul>\n    </section>\n  );\n};\n\nexport default Cast;\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","export const getTrendingMovies = async () => {\n  const response = await fetch(\n    `https://api.themoviedb.org/3/trending/movie/day?api_key=133c2d7094f741475ddc1c9cf006a400`\n  );\n  const data = await response.json();\n  return data.results;\n};\n\nexport const searchMovieByQuery = async query => {\n  const response = await fetch(\n    `https://api.themoviedb.org/3/search/movie?api_key=133c2d7094f741475ddc1c9cf006a400&query=${query}`\n  );\n  const data = await response.json();\n  return data.results;\n};\n\nexport const searchMovieById = async id => {\n  const response = await fetch(\n    `https://api.themoviedb.org/3/movie/${id}?api_key=133c2d7094f741475ddc1c9cf006a400`\n  );\n  const data = await response.json();\n  return data;\n};\n\nexport const getMovieCredits = async id => {\n  const response = await fetch(\n    `https://api.themoviedb.org/3/movie/${id}/credits?api_key=133c2d7094f741475ddc1c9cf006a400`\n  );\n  const data = await response.json();\n  return data.cast;\n};\n\nexport const getMovieReviews = async movieId => {\n  const response = await fetch(\n    `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=133c2d7094f741475ddc1c9cf006a400`\n  );\n  const data = await response.json();\n  return data.results;\n};\n"],"names":["useState","movie","setMovie","movieId","useParams","useEffect","getMovieCredits","then","catch","error","console","log","map","id","name","character","profile_path","src","alt","width","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","done","Promise","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","getTrendingMovies","fetch","response","json","data","results","searchMovieByQuery","query","searchMovieById","cast","getMovieReviews"],"sourceRoot":""}